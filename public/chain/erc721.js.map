{"version":3,"file":"erc721.js","sourceRoot":"","sources":["../../src/chain/erc721.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AACjC,OAAO,EACL,UAAU,EACV,gBAAgB,EAChB,aAAa,EACb,yBAAyB,EAC1B,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEnD,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB;QACE,IAAI,EAAE,UAAU;QAChB,eAAe,EAAE,YAAY;QAC7B,IAAI,EAAE,kBAAkB;QACxB,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;YACjC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;YAC/B,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;SACrC;QACD,OAAO,EAAE,EAAE;KACZ;CACO,CAAC;AAEX,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,MAI7B;IACC,MAAM,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,EAAE,OAAoC,CAAC;IACzE,IAAI,CAAC,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC9C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;IAChE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;IAEzD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,gBAAgB,CAAC,WAAW,EAAE;QACtD,OAAO,EAAE,MAAM,CAAC,QAAQ;QACxB,GAAG,EAAE,SAAS;QACd,YAAY,EAAE,kBAAkB;QAChC,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC;QACrC,OAAO,EAAE,EAAE;KACZ,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACvD,MAAM,OAAO,GAAG,MAAM,yBAAyB,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IACvE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import { isAddress } from 'viem';\nimport {\n  getAccount,\n  simulateContract,\n  writeContract,\n  waitForTransactionReceipt\n} from 'wagmi/actions';\nimport { wagmiConfig } from '../components/wallet';\n\nexport const erc721Abi = [\n  {\n    type: 'function',\n    stateMutability: 'nonpayable',\n    name: 'safeTransferFrom',\n    inputs: [\n      { name: 'from', type: 'address' },\n      { name: 'to', type: 'address' },\n      { name: 'tokenId', type: 'uint256' }\n    ],\n    outputs: []\n  }\n] as const;\n\nexport async function sendNft(params: {\n  contract: `0x${string}`;\n  to: `0x${string}`;\n  tokenId: bigint;\n}) {\n  const me = getAccount(wagmiConfig)?.address as `0x${string}` | undefined;\n  if (!me) throw new Error('지갑이 연결되어 있지 않습니다.');\n  if (!isAddress(params.contract)) throw new Error('잘못된 컨트랙트 주소');\n  if (!isAddress(params.to)) throw new Error('잘못된 수신자 주소');\n\n  const { request } = await simulateContract(wagmiConfig, {\n    address: params.contract,\n    abi: erc721Abi,\n    functionName: 'safeTransferFrom',\n    args: [me, params.to, params.tokenId],\n    account: me\n  });\n\n  const hash = await writeContract(wagmiConfig, request);\n  const receipt = await waitForTransactionReceipt(wagmiConfig, { hash });\n  return { hash, receipt };\n}\n"]}